**
** WALTER STACK LANGUAGE
** Main Library
**
** Version 1.0
** Author Théophile Walter
**

** Commons
"println"  ("\n" concat print)                  def ** Print a string with a new line
"uprint"   (string print)                       def ** Print any type
"uprintln" (string println)                     def ** Print any type with a new line
"uconcat"  (string exch string exch concat)     def ** Concatenate any type as a string
"exch"     (1 mb)                               def ** Exchange the two first values on the stack
"copy"     (1 dup)                              def ** Copy the value on top of the stack
"this"     (parent "." concat exch concat call) def ** Call the group defined in the current group from a string name

** Alias
"sum"         (add)    def
"substract"   (sub)    def
"multiply"    (mul)    def
"divide"      (div)    def
"concatenate" (concat) def
"square_root" (sqrt)   def
"move_back"   (mb)     def
"minimum"     (min)    def
"maximum"     (max)    def
"duplicate"   (dup)    def
"true"        1        def
"false"       0        def

** Logical operations
"not" ((false) exch (true) exch if) def ** Negation
"and" (add 2 equal) def
"or" (sum 0 gt) def
"xor" (sum 1 equal) def
"nif" (not if) def ** Inversed if
** Is a number is lower than another
"lt" (
    ** False if the two numbers are equals
    (pop pop false)
    ** Check if they are different
    (copy 2 mb max equal)
    ** Prepare the stack order
    (3 mb) 2 repeat 2 dup (5 mb) 2 repeat
    ** Condition
    equal if
) def
** Is a number is greater than another
"gt" (
    ** False if the two numbers are equals
    (pop pop false)
    ** Check if they are different
    (copy 2 mb min equal)
    ** Prepare the stack order
    (3 mb) 2 repeat 2 dup (5 mb) 2 repeat
    ** Condition
    equal if
) def
"iflt" (lt if) def ** If lower than, example: "(1) (2) 0 5 iflt" will put 1 in the stack
"ifgt" (gt if) def ** If greater than, example: "(1) (2) 0 5 ifgt" will put 2 in the stack

** Mathematics group
"math" (
    
    ** Constants
    "pi" 3.1415926535 def
    "phi" 5 sqrt 1 add 2 div def

    ** Convert degrees to radians
    "rad" (math.pi 180 div mul) def

    ** Convert radians to degrees
    "deg" (180 math.pi div mul) def

    ** Compute a power operation
    ** Example: "2 8 math.pow" will return 256
    "pow" (
        ** If the power is < 1 we return 0
        (pop pop 1)
        ** If the power is >= 1 we compute it for real
        (
            exch copy ** Copy the number to multiply
            2 mb exch ** Prepare the stack order
            (exch copy 2 mb mul) exch ** The group to repeat
            1 sub repeat ** The loop
            exch pop ** Clear the stack
        )
        ** Prepare the stack order
        (2 mb) 2 repeat copy 3 mb
        ** Condition for the power
        1 iflt
    ) def

    ** Compute the factorial of a number
    "fact" (
        1 exch ** The result
        1 exch ** The counter that will be incremented
        (
            copy ** Copy the counter
            1 add 2 mb ** Increment it and move it back
            mul ** Multiply the result and the counter
            exch ** Move the result back
        ) exch repeat ** Repeat the number of time given in the stack
        pop ** Remove the counter
    ) def

) static

** Operations on the stack
"stack" (

    ** Empty the stack
    ** Get the stack size before adding the (pop) group
    "empty" (size (pop) exch repeat) def

    ** Fill the stact with given element
    ** Example: "0 10 stack.fill" will put 10 times the number 0 in the stack
    "fill" (
        ** If the parameter is 0, we pop the value to fill
        copy
        (pop pop) exch ** Code if the parameter is <1
        ((copy) exch 1 sub repeat) exch ** Code if the parameter is >=1
        1 iflt
    ) def

    ** Copy the entire stack
    "copy" (size dup) def

    ** Print the stack without deleting it
    "print" (
        ** Copy the stack
        stack.copy
        ** Print the copied elements (and remove them)
        (uprintln) size 1 sub 2 div repeat
    ) def

    ** Print the stack with a given separator without deleting it
    "print_sep" (
        ** Get the size and copy the stack
        size stack.copy
        ** Prepare the printing code
        (
            ** Saves the separator
            copy 2 mb
            ** Concatenate the value and the separator
            uconcat
            ** Print the value
            print
        ) exch
        ** Repeat the printing code
        1 sub repeat
        ** Removes unused elements
        pop pop
    ) def

    ** Reverse the full stack
    "rev" (
        ** Big group, the code will be executed only if there are some values in the stack
        (
            ** The size of the stack (two times, one is a value to decrement)
            size copy
            ** The code that reverse the stack one by one
            (
                ** Decrement the counter and move it back
                1 sub copy 2 mb
                ** Move the value back
                1 add mb
            ) exch
            ** Repeat it
            repeat
            ** Clean up the stack (remove the counter that shall be at 0)
            pop
        ) ()
        ** Execute if the stack is bigger than 3 (the two groups and at least two elements)
        size 2 ifgt
    ) def

    ** Print the stack in the "real" order separated with spaces
    "pretty_print" (
        stack.rev " " stack.print_sep stack.rev
    ) def

) static

** Boolean utilities
"boolean" (

    ** Converts from string: "true" or "false"
    "from_string" (
        ** Copy the string (to check "false")
        copy 
        ** Code executed if the string is "true" (pop the copy and put true)
        (pop true) exch
        ** Code executed if the string is not "true"
        (
            ** Code executed if string if "false"
            (false) exch
            ** Code executed if string is not "false"
            ("Error: \"boolean.from_string\" expect \"true\" or \"false\"!" println 0 exit) exch
            ** Condition
            "false" equal if
        ) exch
        ** First condition
        "true" equal if
    ) def

    ** Converts boolean to string
    "to_string" (
        ("false") ("true") 2 mb exch if
    ) def
    
    ** Random boolean
    "random" (
        random 0.5 lt
    ) def

) static

** Numbers utilities
** Different from "math" group
"number" (

    ** Not a number
    "nan" (
        "NaN" number
    ) def
    "not_a_number" (number.nan) def

    ** Check if a value is NaN
    "isnan" (
        copy equal not
    ) def
    "is_not_a_number" (number.isnan) def

) static

** String utilities
"string" (
    ** TODO
) static

** Tests utilities
"test" (

    ** Pass if the top value is 1
    ** Exit and print an error if the second value is 0
    ** The error message is the first stack value
    "assert_true" (
        exch
        ** Code executed if true
        (pop) exch
        ** Code executed if false
        (uprintln 1 exit) exch
        ** Condition
        if
    ) def

    ** Pass if the top value is 0
    ** Exit and print an error if the value is 1
    ** The error message is the first stack value
    "assert_false" (
        exch not exch test.assert_true
    ) def

    ** Pass if two values are equals
    ** Exit and print an error if not
    ** The error message is the first stack value
    "assert_equal" (
        2 mb equal exch test.assert_true
    ) def

    ** Pass if two values are not equals
    ** Exit and print an error if they are
    ** The error message is the first stack value
    "assert_not_equal" (
        2 mb equal exch test.assert_false
    ) def

) static

** Informations
"wsl" (
    "version"          "1.0 beta"                          def
    "version_code"      10                                 def
    "is_alpha"          false                              def
    "is_beta"           true                               def
    "lib_version"      "1.0"                               def
    "lib_version_code"  10                                 def
    "copyright"        "Copyright 2018 - Théophile Walter" def
) static
