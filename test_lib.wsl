**
** WALTER STACK LANGUAGE
** Test for the main library
**
** Version 1.0
** Author Th√©ophile Walter
**

** Check if the library version is compatible
10 wsl.lib_version_code "\"test_lib.wsl\" error: incompatible library version" test.assert_equal

** Empty the stack
** The tests needs to be executed on an empty stack
(pop) size 1 sub repeat

** Test the functions

** Logical operators
** not
false not "\"test_lib.wsl\" error: not" test.assert_true
true not "\"test_lib.wsl\" error: not" test.assert_false
** and
false false and "\"test_lib.wsl\" error: and" test.assert_false
false true and "\"test_lib.wsl\" error: and" test.assert_false
true false and "\"test_lib.wsl\" error: and" test.assert_false
true true and "\"test_lib.wsl\" error: and" test.assert_true
** or
false false or "\"test_lib.wsl\" error: or" test.assert_false
false true or "\"test_lib.wsl\" error: or" test.assert_true
true false or "\"test_lib.wsl\" error: or" test.assert_true
true true or "\"test_lib.wsl\" error: or" test.assert_true
** xor
false false xor "\"test_lib.wsl\" error: xor" test.assert_false
false true xor "\"test_lib.wsl\" error: xor" test.assert_true
true false xor "\"test_lib.wsl\" error: xor" test.assert_true
true true xor "\"test_lib.wsl\" error: xor" test.assert_false

** lt
0 5 lt "\"test_lib.wsl\" error: lt" test.assert_true
5 5 lt "\"test_lib.wsl\" error: lt" test.assert_false
9 5 lt "\"test_lib.wsl\" error: lt" test.assert_false

** gt
0 5 gt "\"test_lib.wsl\" error: gt" test.assert_false
5 5 gt "\"test_lib.wsl\" error: gt" test.assert_false
9 5 gt "\"test_lib.wsl\" error: gt" test.assert_true

** Math
math.pi math.deg 180 "\"test_lib.wsl\" error: math.rad" test.assert_equal
180 math.rad math.pi "\"test_lib.wsl\" error: math.rad" test.assert_equal
2 0 math.pow 1 "\"test_lib.wsl\" error: math.pow" test.assert_equal
2 1 math.pow 2 "\"test_lib.wsl\" error: math.pow" test.assert_equal
2 8 math.pow 256 "\"test_lib.wsl\" error: math.pow" test.assert_equal

** Stack
stack.empty size 0 "\"test_lib.wsl\" error: stack.empty" test.assert_equal
0 1 2 3 4 5 stack.empty size 0 "\"test_lib.wsl\" error: stack.empty" test.assert_equal
5 0 stack.fill size 0 "\"test_lib.wsl\" error: stack.fill" test.assert_equal
5 3 stack.fill (5 "\"test_lib.wsl\" error: stack.fill" test.assert_equal) 3 repeat
size 0 "\"test_lib.wsl\" error: stack.fill" test.assert_equal ** Makes sure that there is no too much elements
17 42 69 stack.copy
(
    69 "\"test_lib.wsl\" error: stack.copy" test.assert_equal
    42 "\"test_lib.wsl\" error: stack.copy" test.assert_equal
    17 "\"test_lib.wsl\" error: stack.copy" test.assert_equal
) 2 repeat
size 0 "\"test_lib.wsl\" error: stack.copy" test.assert_equal ** Makes sure that there is no too much elements
"a" "b" "c" stack.rev
"a" "\"test_lib.wsl\" error: stack.rev" test.assert_equal
"b" "\"test_lib.wsl\" error: stack.rev" test.assert_equal
"c" "\"test_lib.wsl\" error: stack.rev" test.assert_equal
size 0 "\"test_lib.wsl\" error: stack.rev" test.assert_equal ** Makes sure that there is no too much elements

** Boolean
0 boolean.to_string "false" "\"test_lib.wsl\" error: boolean.to_string" test.assert_equal
1 boolean.to_string "true" "\"test_lib.wsl\" error: boolean.to_string" test.assert_equal
"true" boolean.from_string 1 "\"test_lib.wsl\" error: boolean.from_string" test.assert_equal
"false" boolean.from_string 0 "\"test_lib.wsl\" error: boolean.from_string" test.assert_equal
